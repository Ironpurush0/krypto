[{"C:\\Users\\Ridam Saxena\\Desktop\\krypto\\src\\index.js":"1","C:\\Users\\Ridam Saxena\\Desktop\\krypto\\src\\App.js":"2","C:\\Users\\Ridam Saxena\\Desktop\\krypto\\src\\pages\\Home.js":"3","C:\\Users\\Ridam Saxena\\Desktop\\krypto\\src\\pages\\Details.js":"4","C:\\Users\\Ridam Saxena\\Desktop\\krypto\\src\\components\\CoinList.js":"5","C:\\Users\\Ridam Saxena\\Desktop\\krypto\\src\\components\\CoinItem.js":"6","C:\\Users\\Ridam Saxena\\Desktop\\krypto\\src\\api.js":"7","C:\\Users\\Ridam Saxena\\Desktop\\krypto\\src\\context\\WatchListContext.js":"8","C:\\Users\\Ridam Saxena\\Desktop\\krypto\\src\\components\\GrapChart.js":"9","C:\\Users\\Ridam Saxena\\Desktop\\krypto\\src\\components\\CoinData.js":"10","C:\\Users\\Ridam Saxena\\Desktop\\krypto\\src\\components\\chartConfig.js":"11","C:\\Users\\Ridam Saxena\\Desktop\\krypto\\src\\components\\AddCoin.js":"12","C:\\Users\\Ridam Saxena\\Desktop\\krypto\\src\\components\\AddCurrency.js":"13"},{"size":433,"mtime":1609179762045,"results":"14","hashOfConfig":"15"},{"size":584,"mtime":1609603960459,"results":"16","hashOfConfig":"15"},{"size":480,"mtime":1610448427383,"results":"17","hashOfConfig":"15"},{"size":2317,"mtime":1610378440637,"results":"18","hashOfConfig":"15"},{"size":1444,"mtime":1610448389846,"results":"19","hashOfConfig":"15"},{"size":1263,"mtime":1610388305373,"results":"20","hashOfConfig":"15"},{"size":111,"mtime":1609258229424,"results":"21","hashOfConfig":"15"},{"size":903,"mtime":1610471457759,"results":"22","hashOfConfig":"15"},{"size":2388,"mtime":1610300876518,"results":"23","hashOfConfig":"15"},{"size":2009,"mtime":1610470015290,"results":"24","hashOfConfig":"15"},{"size":394,"mtime":1610300994337,"results":"25","hashOfConfig":"15"},{"size":1830,"mtime":1610389350224,"results":"26","hashOfConfig":"15"},{"size":1453,"mtime":1610389931313,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1097q1s",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"51","usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"30"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\Ridam Saxena\\Desktop\\krypto\\src\\index.js",[],["61","62"],"C:\\Users\\Ridam Saxena\\Desktop\\krypto\\src\\App.js",[],"C:\\Users\\Ridam Saxena\\Desktop\\krypto\\src\\pages\\Home.js",["63"],"import React from 'react'\r\nimport './Home.css'\r\n\r\nimport CoinList from '../components/CoinList'\r\nimport AddCoin from '../components/AddCoin'\r\nimport AddCurrency from '../components/AddCurrency'\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"coin-currency\">\r\n                <AddCoin />\r\n                {/* <AddCurrency /> */}\r\n            </div>\r\n            <CoinList />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","C:\\Users\\Ridam Saxena\\Desktop\\krypto\\src\\pages\\Details.js",["64"],"import React, {useEffect, useState} from 'react'\r\nimport {useParams} from 'react-router-dom'\r\n\r\nimport GrapChart from '../components/GrapChart'\r\nimport CoinData from '../components/CoinData'\r\n\r\nimport coinGecko from '../api'\r\n\r\nimport './Details.css'\r\n\r\nconst Details = () => {\r\n    const [chartData, setChartData] = useState({})\r\n    const [isLoading, setIsLoading] = useState(true)\r\n\r\n    const {id} = useParams()\r\n\r\n    const formatData = data => {\r\n        return data.map(el => {\r\n            return {\r\n                t: el[0],\r\n                y: el[1].toFixed(2)\r\n            }\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setIsLoading(true)\r\n            const [days, week, year, detail] = await Promise.all([\r\n                coinGecko.get(`/coins/${id}/market_chart`, {\r\n                    params: {\r\n                        vs_currency: \"usd\",\r\n                        days: 1,\r\n                    }\r\n                }),\r\n                coinGecko.get(`/coins/${id}/market_chart`, {\r\n                    params: {\r\n                        vs_currency: \"usd\",\r\n                        days: 7,\r\n                    }\r\n                }),\r\n                coinGecko.get(`/coins/${id}/market_chart`, {\r\n                    params: {\r\n                        vs_currency: \"usd\",\r\n                        days: 365,\r\n                    }\r\n                }),\r\n                coinGecko.get(`/coins/markets`, {\r\n                    params: {\r\n                        vs_currency: \"usd\",\r\n                        ids: id,\r\n                    }\r\n                })\r\n            ])\r\n            setChartData({\r\n                days: formatData(days.data.prices), \r\n                week: formatData(week.data.prices), \r\n                year: formatData(year.data.prices), \r\n                detail: detail.data[0]})\r\n            setIsLoading(false)\r\n        }\r\n\r\n        fetchData()\r\n    }, [])\r\n\r\n    if(isLoading){\r\n        return <h1 style={{color: \"white\"}}>Loading...</h1>\r\n    }\r\n    \r\n    return (\r\n        <div className=\"graphContainer\">\r\n            <h1 style={{color: \"#44449B\"}}>{chartData.detail.name}</h1>\r\n            <GrapChart data={chartData} />\r\n            <CoinData data={chartData} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Details\r\n","C:\\Users\\Ridam Saxena\\Desktop\\krypto\\src\\components\\CoinList.js",["65"],"import React, {useState, useEffect, useContext}from 'react'\r\nimport CoinGecko from '../api'\r\nimport './CoinList.css'\r\n\r\nimport CoinItem from './CoinItem'\r\nimport { WatchListContext } from '../context/WatchListContext'\r\n\r\nconst CoinList = () => {\r\n    const [coins, setCoins] = useState([])\r\n    const [isLoading, setIsLoading] = useState(false)\r\n\r\n    const {watchList, deleteCoin, currencies} = useContext(WatchListContext)\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setIsLoading(true)\r\n            const res = await CoinGecko.get(\"/coins/markets/\", {\r\n                params:{\r\n                    vs_currency: \"usd\",\r\n                    ids: watchList.join(\",\")\r\n                },\r\n                \r\n            })\r\n\r\n            console.log(res.data)\r\n            setCoins(res.data)\r\n            setIsLoading(false)\r\n        }\r\n\r\n        if(watchList.length > 0){\r\n            fetchData()\r\n        } else {\r\n        setCoins([])\r\n        }\r\n        \r\n    }, [watchList])\r\n\r\n    if(!watchList.length){\r\n        return <p>No Coins to show.</p>\r\n    }\r\n\r\n\r\n    if(isLoading){\r\n        return <p>LOADING</p>\r\n    }\r\n    \r\n    return (\r\n        <div className=\"list-container\">\r\n            {\r\n                coins.map(coin => (\r\n                        <CoinItem key={coin.id} coin={coin} deleteCoin={deleteCoin} />\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CoinList\r\n","C:\\Users\\Ridam Saxena\\Desktop\\krypto\\src\\components\\CoinItem.js",["66","67"],"import React, {useState} from 'react'\r\nimport {RiArrowUpSFill} from 'react-icons/ri'\r\nimport {AiOutlineCaretDown} from 'react-icons/ai'\r\nimport {TiDelete} from 'react-icons/ti'\r\nimport './CoinItem.css'\r\n\r\nimport {Link} from 'react-router-dom'\r\n\r\n\r\nconst CoinItem = ({coin, deleteCoin}) => {\r\n    return (\r\n        <Link to={{\r\n            pathname: `/coins/${coin.id}`,\r\n            state: {\r\n                data: coin\r\n            }\r\n        }} className=\"wrapper\">\r\n        <div className=\"wrapper\">\r\n                <img src={coin.image} alt=\"image\" width={45} height={45} />\r\n                <p>{coin.name}</p>\r\n                    <p>{coin.current_price}</p>\r\n                    <p style={{color : coin.price_change_percentage_24h > 0 ? \"green\" : \"red\"}} className=\"percent\">\r\n                        <span>{coin.price_change_percentage_24h > 0 ? <RiArrowUpSFill /> : <AiOutlineCaretDown />}</span>\r\n                        {coin.price_change_percentage_24h}\r\n                        <TiDelete className=\"delete\" onClick={(e) => {\r\n                            e.preventDefault()\r\n                            deleteCoin(coin.id)\r\n                        }} />\r\n                    </p>\r\n        </div>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default CoinItem\r\n","C:\\Users\\Ridam Saxena\\Desktop\\krypto\\src\\api.js",[],"C:\\Users\\Ridam Saxena\\Desktop\\krypto\\src\\context\\WatchListContext.js",[],"C:\\Users\\Ridam Saxena\\Desktop\\krypto\\src\\components\\GrapChart.js",["68","69","70","71","72"],"import React, {useEffect, useRef, useState} from 'react'\r\nimport Chartjs from 'chart.js'\r\nimport './GraphChart.css'\r\n\r\nimport {options} from './chartConfig'\r\n\r\nconst GrapChart = ({data}) => {\r\n    const chartRef = useRef()\r\n    const {days, week, year, detail} = data\r\n    const [timeFormat, setTimeFormat] = useState(\"24h\")\r\n\r\n    const checkTimePeriod = () => {\r\n        switch(timeFormat){\r\n            case \"24h\":\r\n                return days\r\n            case \"7d\":\r\n                return week\r\n            case \"1y\":\r\n                return year\r\n            defeult:\r\n            return \"24h\"\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if((chartRef && chartRef.current && detail)){\r\n            const myChart = new Chartjs(chartRef.current, {\r\n                type: \"line\",\r\n                data: {\r\n                    datasets: [{\r\n                        label: `${detail.name} price`,\r\n                        data: checkTimePeriod(),\r\n                        backgroundColor: \"rgba(68, 68, 155, 0.1)\",\r\n                        borderColor: \"#44449B\",\r\n                        pointRadius: 5,\r\n                        pointBackgroundColor: \"#1181B2\",\r\n                    }]\r\n                },\r\n                options: {\r\n                    ...options\r\n                }\r\n            })\r\n        }\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <div className=\"graph-Container\">\r\n                <canvas ref={chartRef} id=\"myChart\">\r\n                </canvas>\r\n            </div>\r\n            <div className=\"metaInfoContainer\">\r\n            <div className=\"buttonContainer\">\r\n                <button className=\"btn\" onClick={() => setTimeFormat(\"24h\")}>1d</button>\r\n                <button className=\"btn\" onClick={() => setTimeFormat(\"7d\")}>7d</button>\r\n                <button className=\"btn\" onClick={() => setTimeFormat(\"1y\")}>1y</button>\r\n            </div>\r\n            <div className=\"priceTracker\">\r\n                <h1>{detail.current_price.toFixed(2)} $</h1>\r\n                <p \r\n                    style={\r\n                        {\r\n                            fontSize: \"20px\", \r\n                            color: detail.price_change_24h < 0 ? \"red\" : \"green\"}}>\r\n                                {detail.price_change_24h.toFixed(2)} %\r\n                </p>\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GrapChart\r\n","C:\\Users\\Ridam Saxena\\Desktop\\krypto\\src\\components\\CoinData.js",["73","74","75"],"C:\\Users\\Ridam Saxena\\Desktop\\krypto\\src\\components\\chartConfig.js",[],"C:\\Users\\Ridam Saxena\\Desktop\\krypto\\src\\components\\AddCoin.js",["76"],"import React, {useContext, useState} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nimport {WatchListContext} from '../context/WatchListContext'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 120,\r\n    },\r\n    selectEmpty: {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  }));\r\n\r\nconst AddCoin = () => {\r\n    const classes = useStyles();\r\n    const [coin, setCoin] = useState('');\r\n    const {addCoin} = useContext(WatchListContext)\r\n    const availableCoins = [\r\n        \"bitcoin\",\r\n        \"ethereum\",\r\n        \"ripple\",\r\n        \"tether\",\r\n        \"bitcoin-cash\",\r\n        \"litecoin\",\r\n        \"eos\",\r\n        \"okb\",\r\n        \"tezos\",\r\n        \"cardano\",\r\n      ];\r\n\r\n    const handleChange = (event) => {\r\n        event.preventDefault()\r\n        setCoin(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <FormControl style={{backgroundColor: \"#44449B\"}} variant=\"filled\" className={classes.formControl}>\r\n        <InputLabel id=\"demo-simple-select-filled-label\">Add Coin</InputLabel>\r\n        <Select\r\n          labelId=\"demo-simple-select-filled-label\"\r\n          id=\"demo-simple-select-filled\"\r\n          value={coin}\r\n          onChange={handleChange}\r\n        >\r\n          {\r\n              availableCoins.map(el => (\r\n                  <MenuItem value={el} onClick={() => addCoin(el)}>{el}</MenuItem>\r\n              ))\r\n          }\r\n        </Select>\r\n      </FormControl>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddCoin\r\n","C:\\Users\\Ridam Saxena\\Desktop\\krypto\\src\\components\\AddCurrency.js",[],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":6,"column":8,"nodeType":"83","messageId":"84","endLine":6,"endColumn":19},{"ruleId":"85","severity":1,"message":"86","line":64,"column":8,"nodeType":"87","endLine":64,"endColumn":10,"suggestions":"88"},{"ruleId":"81","severity":1,"message":"89","line":12,"column":35,"nodeType":"83","messageId":"84","endLine":12,"endColumn":45},{"ruleId":"81","severity":1,"message":"90","line":1,"column":16,"nodeType":"83","messageId":"84","endLine":1,"endColumn":24},{"ruleId":"91","severity":1,"message":"92","line":19,"column":17,"nodeType":"93","endLine":19,"endColumn":76},{"ruleId":"94","severity":1,"message":"95","line":13,"column":9,"nodeType":"96","messageId":"97","endLine":22,"endColumn":10},{"ruleId":"98","severity":1,"message":"99","line":20,"column":13,"nodeType":"100","messageId":"101","endLine":21,"endColumn":25},{"ruleId":"102","severity":1,"message":"103","line":20,"column":13,"nodeType":"83","messageId":"104","endLine":20,"endColumn":20,"fix":"105"},{"ruleId":"106","severity":1,"message":"107","line":20,"column":13,"nodeType":"100","messageId":"108","endLine":21,"endColumn":25},{"ruleId":"81","severity":1,"message":"109","line":27,"column":19,"nodeType":"83","messageId":"84","endLine":27,"endColumn":26},{"ruleId":"81","severity":1,"message":"110","line":4,"column":9,"nodeType":"83","messageId":"84","endLine":4,"endColumn":13},{"ruleId":"81","severity":1,"message":"111","line":4,"column":15,"nodeType":"83","messageId":"84","endLine":4,"endColumn":20},{"ruleId":"81","severity":1,"message":"112","line":22,"column":11,"nodeType":"83","messageId":"84","endLine":22,"endColumn":18},{"ruleId":"81","severity":1,"message":"113","line":5,"column":8,"nodeType":"83","messageId":"84","endLine":5,"endColumn":22},"no-native-reassign",["114"],"no-negated-in-lhs",["115"],"no-unused-vars","'AddCurrency' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["116"],"'currencies' is assigned a value but never used.","'useState' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-labels","Unexpected labeled statement.","LabeledStatement","unexpectedLabel","no-unused-labels","'defeult:' is defined but never used.","unused",{"range":"117","text":"118"},"no-unreachable","Unreachable code.","unreachableCode","'myChart' is assigned a value but never used.","'Grid' is defined but never used.","'Paper' is defined but never used.","'classes' is assigned a value but never used.","'FormHelperText' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"119","fix":"120"},[566,588],"","Update the dependencies array to be: [id]",{"range":"121","text":"122"},[1948,1950],"[id]"]